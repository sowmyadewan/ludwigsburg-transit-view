# LiveLink Full Stack Docker Setup

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
#    image: postgres:15-alpine
    image: postgis/postgis:15-3.4
    container_name: livelink_postgres
    environment:
      POSTGRES_DB: livelink_db
      POSTGRES_USER: livelink_user
      POSTGRES_PASSWORD: livelink_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - livelink_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U livelink_user -d livelink_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: livelink_redis
    ports:
      - "6379:6379"
    networks:
      - livelink_network
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data

  # Backend API (your IntelliJ Spring Boot app)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: livelink_backend
    environment:
      # Database configuration
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/livelink_db
      SPRING_DATASOURCE_USERNAME: livelink_user
      SPRING_DATASOURCE_PASSWORD: livelink_password
      
      # Redis configuration
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      
      # Application configuration
      SERVER_PORT: 8080
      SPRING_PROFILES_ACTIVE: docker
      
      # Monitoring
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,prometheus
      MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS: always
    ports:
      - "8081:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - livelink_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (React/Vite)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: livelink_frontend
    environment:
      VITE_API_BASE_URL: http://backend:8080/api/v1
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - livelink_network

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: livelink_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - livelink_network

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: livelink_grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - livelink_network
    depends_on:
      - prometheus

networks:
  livelink_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data: